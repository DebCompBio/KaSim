type error = string list
type token = int
type catalog = int list
type code = string

type version = { build : string ;
                 version : string }

type parameter = { code : code;
                   nb_plot : int;
                   max_time : float nullable;
                   max_events : int nullable
                   }

type ('l,'r) either = [ Left of 'l | Right of 'r ] <json repr="object">
type ('r) result = (error,'r) either

type observable = { time : float; values : float list }

type plot = { legend: string list;
              observables : observable list }

type flux_map =
  { flux_begin_time : float;
    flux_end_time : float;
    flux_rules : string list;
    flux_hits : int list;
    flux_fluxs : float list list;
    flux_name : string
  }

type file_line = { file_name : string nullable ; line : string }

type site = {
     site_name: string;
     site_links: (int * int) list;
     site_states: string list;
}
type site_node = {
     node_name: string;
     node_sites: site list <ocaml repr="array">;
}
type site_graph = site_node list <ocaml repr="array">

type agent_state = {
     abondance : int;
     mixture : site_graph
}

type taken_state = {
     token : string;
     value : float
}

type snapshot = {
    snap_file : string;
    snap_event : int;
    agents : agent_state list;
    tokens : taken_state list;
}

type parse = { contact_map : site_graph }
type alias_unit = unit
type state = { plot : plot nullable;
               time : float;
               time_percentage : int nullable;
               event : int;
               event_percentage : int nullable;
               tracked_events : int nullable;
               log_messages : string list;
               snapshots : snapshot list;
               flux_maps : flux_map list;
               files : file_line list;
               is_running : bool
             }