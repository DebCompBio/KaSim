type id = int
type 'data message = { id : id ; data : 'data }

type catalog <ocaml from="ApiTypes"> = abstract
type code <ocaml from="ApiTypes"> = abstract
type error <ocaml from="ApiTypes"> = abstract
type parameter <ocaml from="ApiTypes"> = abstract
type ('r) result <ocaml from="ApiTypes"> = abstract
type state <ocaml from="ApiTypes"> = abstract
type token <ocaml from="ApiTypes"> = abstract
type parse <ocaml from="ApiTypes"> = abstract
type peturbation = { perturbation_token : token ;
                     perturbation_code : string ; }
type continuation = { continuation_token : token ;
     		      continuation_parameter : parameter }
type request = [ Parse of code
               | Start of parameter
               | Status of token
               | List of unit
               | Stop of token
	       | Peturbation of peturbation
	       | Pause of token
	       | Continue of continuation ]
type response = [ Parse of parse result
                | Start of token result
                | Status of state result
                | List of catalog result
                | Stop of unit result
		| Peturbation of unit result
		| Pause of unit result
		| Continue of unit result ]