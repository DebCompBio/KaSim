function main=main()
% command line: 
%      'KaDE' 'bet.ka' '-d' 'output' '-l' '1' '-p''0.01'
%% THINGS THAT ARE KNOWN FROM KAPPA FILE AND KaSim OPTIONS:
%% 
%% init - the initial abundances of each species and token
%% tinit - the initial simulation time (likely 0)
%% tend - the final simulation time 
%% initialstep - initial time step at the beginning of numerical integration
%% period - the time period between points to return
%%
%% variables (init(i),y(i)) denote numbers of embeddings 
%% rule rates are corrected by the number of automorphisms in the lhs of rules


tinit=0;
tend=1;
initialstep=1e-06;
period=0.01;

global nodevar
nodevar=2;
nvar=1;
nobs=1;
nrules=1;

global var
var=zeros(nvar,1);
global init
init=sparse(nodevar,1);
global k
global kd
global kun
global kdun

k=zeros(nrules,1);
kd=zeros(nrules,1);
kun=zeros(nrules,1);
kdun=zeros(nrules,1);
global jacvar
jacvar=sparse(nvar,nodevar);
global jack
global jackd
global jackun
global jackund

jack=zeros(nrules,nodevar);
jackd=zeros(nrules,nodevar);
jackun=zeros(nrules,nodevar);
jackund=zeros(nrules,nodevar);

t = 0.000000;

init(2)=t;
init(1)=4.5; % A()

k(1)=1; % A(), A(x?) -> 

uiIsOctave = false;
uiIsMatlab = false;
LIC = license('inuse');
for elem = 1:numel(LIC)
    envStr = LIC(elem).feature
    if strcmpi(envStr,'octave')
       LICname=envStr;
       uiIsOctave = true;
       break
    end
    if strcmpi(envStr,'matlab')
       LICname=envStr
       uiIsMatlab = true;
       break
    end
end


options = odeset('RelTol', 1e-3, ...
                 'AbsTol', 1e-3, ...
                 'InitialStep', initialstep, ...
                 'MaxStep', tend, ...
                 'Jacobian', @ode_jacobian);


if uiIsMatlab
   soln =  ode15s(@ode_aux,[tinit tend],ode_init(),options);
   soln.y=soln.y';
elseif uiIsOctave
   soln = ode2r(@ode_aux,[tinit tend],ode_init(),options);
end


nrows = length(soln.x);
tmp = zeros(nodevar,1);

n_points = floor ((tend-tinit)/period)+1;
t = linspace(tinit, tend, n_points);
obs = zeros(nrows,nobs);

for j=1:nrows
    for i=1:nodevar
        z(i)=soln.y(j,i);
    end
    h=ode_obs(z);
    for i=1:nobs
        obs(j,i)=h(i);
    end
end
if nobs==1
   y = interp1(soln.x, obs, t, 'pchip')';
else
   y = interp1(soln.x, obs, t, 'pchip');
end


filename = 'data.csv';
fid = fopen (filename,'w');
fprintf(fid,'# KaDE bet.ka -d output -l 1 -p 0.01\n')
fprintf(fid,'# ')
fprintf(fid,'[T],')
fprintf(fid,'\n')
for j=1:n_points
    for i=1:nobs
        fprintf(fid,'%f,',y(j,i));
    end
    fprintf(fid,'\n');
end
fclose(fid);


end



function Init=ode_init()

global nodevar
global init
Init=zeros(nodevar,1);

Init(1) = init(1); % A()
Init(2) = init(2); % t
end


function dydt=ode_aux(t,y)

global nodevar
global var
global k
global kd
global kun
global kdun



dydt=zeros(nodevar,1);

% rule    : A(), A(x?) -> 
% reaction: A() + A() ->  

dydt(1)=dydt(1)-k(1)*y(1)*y(1);
dydt(1)=dydt(1)-k(1)*y(1)*y(1);
dydt(2)=1;

end


function jac=ode_jacobian(t,y)

global nodevar
global jacvar
global var
global k
global kd
global kun
global kdun

global jack
global jackd
global jackun
global jackund




jac=sparse(nodevar,nodevar);

% rule    : A(), A(x?) -> 
% reaction: A() + A() ->  

jac(1,1)=jac(1,1)-k(1)*y(1);
jac(1,1)=jac(1,1)-k(1)*y(1);
jac(1,1)=jac(1,1)-k(1)*y(1);
jac(1,1)=jac(1,1)-k(1)*y(1);
end


function obs=ode_obs(y)

global nobs
global var
obs=zeros(nobs,1);

t = y(2);

obs(1)=t;

end


main();

