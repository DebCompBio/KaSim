function main=main()
% command line: 
%      'KaDE' 'modifiers.ka' '-d' 'output' '-l' '1' '-p''0.1'
%% THINGS THAT ARE KNOWN FROM KAPPA FILE AND KaSim OPTIONS;
%% 
%% init - the initial abundances of each species and token
%% tinit - the initial simulation time (likely 0)
%% tend - the final simulation time 
%% initialstep - initial time step at the beginning of numerical integration
%% period_t_point - the time period between points to return
%%
%% variables (init(i),y(i)) denote numbers of embeddings 
%% rule rates are corrected by the number of automorphisms in the lhs of rules


tinit=0.000000;
tend=1.000000;
initialstep=0.000001;
period_t_point=0.100000;

global nodevar
nodevar=6;
nvar=7;
nobs=3;
nrules=4;

global var
var=zeros(nvar,1);
global init
init=sparse(nodevar,1);

t = 0.000000;

init(6)=t;
var(1)=10;
init(2)=(1*var(1)); % T(x)
var(5)=(1*((init(2)+init(4))+init(5)));
var(4)=(1*init(2));
init(1)=(1*var(1)); % U(x, y~u?)
var(3)=(1*(init(1)+init(3)));
var(2)=(1*(((init(1)+init(3))+init(4))+init(5)));

global k
global kd
global kun
global kdun

k(1)=1; % essai
k(2)=1; % essai2

uiIsOctave = false;
uiIsMatlab = false;
LIC = license('inuse');
for elem = 1:numel(LIC)
    envStr = LIC(elem).feature
    if strcmpi(envStr,'octave')
       LICname=envStr;
       uiIsOctave = true;
       break
    end
    if strcmpi(envStr,'matlab')
       LICname=envStr
       uiIsMatlab = true;
       break
    end
end


options = odeset('RelTol', 1e-3, ...
                 'AbsTol', 1e-3, ...
                 'InitialStep', initialstep, ...
                 'MaxStep', tend);


if uiIsMatlab
   soln =  ode15s(@ode_aux,[tinit tend],ode_init(),options);
   soln.y=soln.y';
elseif uiIsOctave
   soln = ode2r(@ode_aux,[tinit tend],ode_init(),options);
end


nrows = length(soln.x);
tmp = zeros(nodevar,1);

n_points = floor ((tend-tinit)/period_t_point)+1;
t = linspace(tinit, tend, n_points);
obs = zeros(nrows,nobs);

for j=1:nrows
    for i=1:nodevar
        z(i)=soln.y(j,i);
    end
    h=ode_obs(z);
    for i=1:nobs
        obs(j,i)=h(i);
    end
end
if nobs==1
   y = interp1(soln.x, obs, t, 'pchip')';
else
   y = interp1(soln.x, obs, t, 'pchip');
end


filename = 'data.csv';
fid = fopen (filename,'w');
fprintf(fid,'# KaDE modifiers.ka -d output -l 1 -p 0.1\n')
fprintf(fid,'# ')
fprintf(fid,'[T],')
fprintf(fid,'t,')
fprintf(fid,'T,')
fprintf(fid,'\n')
for j=1:n_points
    for i=1:nobs
        fprintf(fid,'%f,',y(j,i));
    end
    fprintf(fid,'\n');
end
fclose(fid);


end



function Init=ode_init()

global nodevar
global init
Init=zeros(nodevar,1);

Init(1) = init(1); % U(x, y~u?)
Init(2) = init(2); % T(x)
Init(3) = init(3); % U(x, y~p?)
Init(4) = init(4); % T(x!1), U(x!1, y~u?)
Init(5) = init(5); % T(x!1), U(x!1, y~p?)
Init(6) = init(6); % t
end


function dydt=ode_aux(t,y)

global nodevar
global var
global k
global kd
global kun
global kdun

var(5)=(1*((y(2)+y(4))+y(5)));
var(4)=(1*y(2));
var(3)=(1*(y(1)+y(3)));
var(2)=(1*(((y(1)+y(3))+y(4))+y(5)));

k(3)=var(2);
k(4)=var(5);

dydt=zeros(nodevar,1);

% rule    : bind
% reaction: T(x) + U(x, y~p?) -> T(x!1), U(x!1, y~p?) 

dydt(3)=dydt(3)-k(3)*y(3)*y(2);
dydt(2)=dydt(2)-k(3)*y(3)*y(2);
dydt(5)=dydt(5)+k(3)*y(3)*y(2);

% rule    : essai
% reaction: U(x, y~p?) -> T(x) 

dydt(3)=dydt(3)-k(1)*y(3);
dydt(2)=dydt(2)+k(1)*y(3);

% rule    : unbind
% reaction: T(x!1), U(x!1, y~p?) -> T(x) + U(x, y~p?) 

dydt(5)=dydt(5)-k(4)*y(5);
dydt(3)=dydt(3)+k(4)*y(5);
dydt(2)=dydt(2)+k(4)*y(5);

% rule    : essai
% reaction: T(x!1), U(x!1, y~p?) -> T(x) + T(x) 

dydt(5)=dydt(5)-k(1)*y(5);
dydt(2)=dydt(2)+k(1)*y(5);
dydt(2)=dydt(2)+k(1)*y(5);

% rule    : unbind
% reaction: T(x!1), U(x!1, y~u?) -> T(x) + U(x, y~u?) 

dydt(4)=dydt(4)-k(4)*y(4);
dydt(1)=dydt(1)+k(4)*y(4);
dydt(2)=dydt(2)+k(4)*y(4);

% rule    : essai2
% reaction: T(x!1), U(x!1, y~u?) -> T(x!1), U(x!1, y~p?) 

dydt(4)=dydt(4)-k(2)*y(4);
dydt(5)=dydt(5)+k(2)*y(4);

% rule    : essai
% reaction: T(x!1), U(x!1, y~u?) -> T(x) + T(x) 

dydt(4)=dydt(4)-k(1)*y(4);
dydt(2)=dydt(2)+k(1)*y(4);
dydt(2)=dydt(2)+k(1)*y(4);

% rule    : bind
% reaction: T(x) + U(x, y~u?) -> T(x!1), U(x!1, y~u?) 

dydt(1)=dydt(1)-k(3)*y(1)*y(2);
dydt(2)=dydt(2)-k(3)*y(1)*y(2);
dydt(4)=dydt(4)+k(3)*y(1)*y(2);

% rule    : essai2
% reaction: U(x, y~u?) -> U(x, y~p?) 

dydt(1)=dydt(1)-k(2)*y(1);
dydt(3)=dydt(3)+k(2)*y(1);

% rule    : essai
% reaction: U(x, y~u?) -> T(x) 

dydt(1)=dydt(1)-k(1)*y(1);
dydt(2)=dydt(2)+k(1)*y(1);
dydt(6)=1;

end


function obs=ode_obs(y)

global nobs
global var
obs = zeros(nobs,1);

t = y(6);
var(5)=(1*((y(2)+y(4))+y(5)));
var(4)=(1*y(2));
var(3)=(1*(y(1)+y(3)));
var(2)=(1*(((y(1)+y(3))+y(4))+y(5)));

obs(1)=t;
obs(2)=var(3);
obs(3)=var(4);

end


main();
