File './ode.m' already exists do you want to erase (y/N)?
Parsing erre.ka...
done
+ Sanity checks
+ KaSa tools initialization
+ Compute the contact map
+ Compiling...
+ Building initial simulation conditions...
	 -simulation parameters
	 -variable declarations
	 -rules
	 -perturbations
	 -observables
	 -update_domain construction
	 -initial conditions
+ generate the network... 
	 -initial states 
	 -saturating the set of molecular species 
A NEW SPECIES IS DISCOVERED 

canonic form: B(x)

species: B(x)


A NEW SPECIES IS DISCOVERED 

canonic form: A(x)

species: A(x)


A NEW SPECIES IS DISCOVERED 

canonic form: R(e, r)

species: R(e, r)


A NEW SPECIES IS DISCOVERED 

canonic form: E(r)

species: E(r)

add new reactionREACTANTS
PRODUCT

ALREADY SEEN SPECIES 

canonic form: R(e, r)

species: R(e, r)


test for the new species: E(r)
  test for rule 1 (Aut:1)0: /*cc3*/ E/*3*/(r), 1: /*cc4*/ R/*1*/(e)
                         -- R/*1*//*1*/.e = ⊥, E/*3*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.e = E/*3*//*0*/.r @1
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:1 cc:1:R(e):
      
    * rule:1 cc:2:E(r):
      E(r)
      
    
  test for rule 2 (Aut:1)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*0*/.e = E/*3*//*0*/.r
                         ++ R/*1*//*0*/.e = ⊥, E/*3*//*0*/.r = ⊥ @2
    regular case
    find embeddings
    new embeddings
    * rule:2 cc:1:R(e!1, r), E(r!1):
      
    
  test for rule 3 (Aut:2)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1),
                         1: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*1*/.r = ⊥, R/*1*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.r = R/*1*//*0*/.r @3
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:3 cc:1:R(e!1, r), E(r!1):
      
    * rule:3 cc:2:R(e!1, r), E(r!1):
      
    
  test for rule 4 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                         -- R/*2*//*0*/.r = R/*1*//*0*/.r,
                            R/*1*//*0*/.e = ???, R/*1*//*0*/
                         ++ R/*2*//*0*/.r = ⊥ @4
    regular case
    find embeddings
    new embeddings
    * rule:4 cc:1:R(r!1), R(r!1):
      
    
  test for rule 5 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                         -- R/*2*//*0*/.r = R/*1*//*0*/.r
                         ++ R/*2*//*0*/.r = ⊥, R/*1*//*0*/.r = ⊥ @5
    regular case
    find embeddings
    new embeddings
    * rule:5 cc:1:R(r!1), R(r!1):
      
    
  test for rule 6 (Aut:1) -- 
                         ++ R/*ν 0*/, R/*ν 0*/.e = ⊥, R/*ν 0*/.r = ⊥
                         @6
    regular case
    new embeddings
    
  test for rule 7 (Aut:1)0: /*cc6*/ A/*4*/(x), 1: /*cc7*/ B/*5*/(x)
                         -- B/*5*//*1*/.x = ⊥, A/*4*//*0*/.x = ⊥
                         ++ B/*5*//*1*/.x = A/*4*//*0*/.x @12
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:7 cc:1:B(x):
      
    * rule:7 cc:2:A(x):
      
    
  test for rule 8 (Aut:1)0: /*cc8*/ A/*4*/(x!1), B/*5*/(x!1)
                         -- B/*5*//*0*/.x = A/*4*//*0*/.x
                         ++ B/*5*//*0*/.x = ⊥, A/*4*//*0*/.x = ⊥ @13
    regular case
    find embeddings
    new embeddings
    * rule:8 cc:1:A(x!1), B(x!1):
      
    
  
test for the new species: R(e, r)
  test for rule 1 (Aut:1)0: /*cc3*/ E/*3*/(r), 1: /*cc4*/ R/*1*/(e)
                         -- R/*1*//*1*/.e = ⊥, E/*3*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.e = E/*3*//*0*/.r @1
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:1 cc:1:R(e):
      R(e, r)
      
    * rule:1 cc:2:E(r):
      
    compute one refinement
    disjoint union R(e, r)
                   E(r)
    add new reaction
    REACTANTS

    ALREADY SEEN SPECIES 

canonic form: E(r)

species: E(r)


ALREADY SEEN SPECIES 

canonic form: R(e, r)

species: R(e, r)

PRODUCT

A NEW SPECIES IS DISCOVERED 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)


test for rule 2 (Aut:1)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                       -- R/*1*//*0*/.e = E/*3*//*0*/.r
                       ++ R/*1*//*0*/.e = ⊥, E/*3*//*0*/.r = ⊥ @2
  regular case
  find embeddings
  new embeddings
  * rule:2 cc:1:R(e!1, r), E(r!1):
    
  
test for rule 3 (Aut:2)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1),
                       1: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                       -- R/*1*//*1*/.r = ⊥, R/*1*//*0*/.r = ⊥
                       ++ R/*1*//*1*/.r = R/*1*//*0*/.r @3
  regular case
  find embeddings
  find embeddings
  new embeddings
  * rule:3 cc:1:R(e!1, r), E(r!1):
    
  * rule:3 cc:2:R(e!1, r), E(r!1):
    
  
test for rule 4 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                       -- R/*2*//*0*/.r = R/*1*//*0*/.r, R/*1*//*0*/.e = ???,
                          R/*1*//*0*/
                       ++ R/*2*//*0*/.r = ⊥ @4
  regular case
  find embeddings
  new embeddings
  * rule:4 cc:1:R(r!1), R(r!1):
    
  
test for rule 5 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                       -- R/*2*//*0*/.r = R/*1*//*0*/.r
                       ++ R/*2*//*0*/.r = ⊥, R/*1*//*0*/.r = ⊥ @5
  regular case
  find embeddings
  new embeddings
  * rule:5 cc:1:R(r!1), R(r!1):
    
  
test for rule 6 (Aut:1) -- 
                       ++ R/*ν 0*/, R/*ν 0*/.e = ⊥, R/*ν 0*/.r = ⊥ @6
  regular case
  new embeddings
  
test for rule 7 (Aut:1)0: /*cc6*/ A/*4*/(x), 1: /*cc7*/ B/*5*/(x)
                       -- B/*5*//*1*/.x = ⊥, A/*4*//*0*/.x = ⊥
                       ++ B/*5*//*1*/.x = A/*4*//*0*/.x @12
  regular case
  find embeddings
  find embeddings
  new embeddings
  * rule:7 cc:1:B(x):
    
  * rule:7 cc:2:A(x):
    
  
test for rule 8 (Aut:1)0: /*cc8*/ A/*4*/(x!1), B/*5*/(x!1)
                       -- B/*5*//*0*/.x = A/*4*//*0*/.x
                       ++ B/*5*//*0*/.x = ⊥, A/*4*//*0*/.x = ⊥ @13
  regular case
  find embeddings
  new embeddings
  * rule:8 cc:1:A(x!1), B(x!1):
    
  
test for the new species: E(r!1), R(e!1, r)
  test for rule 1 (Aut:1)0: /*cc3*/ E/*3*/(r), 1: /*cc4*/ R/*1*/(e)
                         -- R/*1*//*1*/.e = ⊥, E/*3*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.e = E/*3*//*0*/.r @1
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:1 cc:1:R(e):
      
    * rule:1 cc:2:E(r):
      
    
  test for rule 2 (Aut:1)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*0*/.e = E/*3*//*0*/.r
                         ++ R/*1*//*0*/.e = ⊥, E/*3*//*0*/.r = ⊥ @2
    regular case
    find embeddings
    new embeddings
    * rule:2 cc:1:R(e!1, r), E(r!1):
      E(r!1), R(e!1, r)
      
    compute one refinement
    disjoint union E(r!1), R(e!1, r)
    add new reaction
    REACTANTS

    ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)

PRODUCT

ALREADY SEEN SPECIES 

canonic form: R(e, r)

species: R(e, r)


ALREADY SEEN SPECIES 

canonic form: E(r)

species: E(r)


test for rule 3 (Aut:2)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1),
                       1: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                       -- R/*1*//*1*/.r = ⊥, R/*1*//*0*/.r = ⊥
                       ++ R/*1*//*1*/.r = R/*1*//*0*/.r @3
  regular case
  find embeddings
  find embeddings
  new embeddings
  * rule:3 cc:1:R(e!1, r), E(r!1):
    E(r!1), R(e!1, r)
    
  * rule:3 cc:2:R(e!1, r), E(r!1):
    E(r!1), R(e!1, r)
    
  compute one refinement
  disjoint union E(r!1), R(e!1, r)
                 E(r!1), R(e!1, r)
  add new reaction
  REACTANTS

  ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)


ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)

PRODUCT

A NEW SPECIES IS DISCOVERED 

canonic form: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)

species: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)


test for rule 4 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                       -- R/*2*//*0*/.r = R/*1*//*0*/.r, R/*1*//*0*/.e = ???,
                          R/*1*//*0*/
                       ++ R/*2*//*0*/.r = ⊥ @4
  regular case
  find embeddings
  new embeddings
  * rule:4 cc:1:R(r!1), R(r!1):
    
  
test for rule 5 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                       -- R/*2*//*0*/.r = R/*1*//*0*/.r
                       ++ R/*2*//*0*/.r = ⊥, R/*1*//*0*/.r = ⊥ @5
  regular case
  find embeddings
  new embeddings
  * rule:5 cc:1:R(r!1), R(r!1):
    
  
test for rule 6 (Aut:1) -- 
                       ++ R/*ν 0*/, R/*ν 0*/.e = ⊥, R/*ν 0*/.r = ⊥ @6
  regular case
  new embeddings
  
test for rule 7 (Aut:1)0: /*cc6*/ A/*4*/(x), 1: /*cc7*/ B/*5*/(x)
                       -- B/*5*//*1*/.x = ⊥, A/*4*//*0*/.x = ⊥
                       ++ B/*5*//*1*/.x = A/*4*//*0*/.x @12
  regular case
  find embeddings
  find embeddings
  new embeddings
  * rule:7 cc:1:B(x):
    
  * rule:7 cc:2:A(x):
    
  
test for rule 8 (Aut:1)0: /*cc8*/ A/*4*/(x!1), B/*5*/(x!1)
                       -- B/*5*//*0*/.x = A/*4*//*0*/.x
                       ++ B/*5*//*0*/.x = ⊥, A/*4*//*0*/.x = ⊥ @13
  regular case
  find embeddings
  new embeddings
  * rule:8 cc:1:A(x!1), B(x!1):
    
  
test for the new species: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)
  test for rule 1 (Aut:1)0: /*cc3*/ E/*3*/(r), 1: /*cc4*/ R/*1*/(e)
                         -- R/*1*//*1*/.e = ⊥, E/*3*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.e = E/*3*//*0*/.r @1
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:1 cc:1:R(e):
      
    * rule:1 cc:2:E(r):
      
    
  test for rule 2 (Aut:1)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*0*/.e = E/*3*//*0*/.r
                         ++ R/*1*//*0*/.e = ⊥, E/*3*//*0*/.r = ⊥ @2
    regular case
    find embeddings
    new embeddings
    * rule:2 cc:1:R(e!1, r), E(r!1):
      
    
  test for rule 3 (Aut:2)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1),
                         1: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*1*/.r = ⊥, R/*1*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.r = R/*1*//*0*/.r @3
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:3 cc:1:R(e!1, r), E(r!1):
      
    * rule:3 cc:2:R(e!1, r), E(r!1):
      
    
  test for rule 4 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                         -- R/*2*//*0*/.r = R/*1*//*0*/.r,
                            R/*1*//*0*/.e = ???, R/*1*//*0*/
                         ++ R/*2*//*0*/.r = ⊥ @4
    regular case
    find embeddings
    new embeddings
    * rule:4 cc:1:R(r!1), R(r!1):
      E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)
      E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)
      
    compute one refinement
    disjoint union E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)
    add new reaction
    REACTANTS

    ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)

species: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)

PRODUCT

ALREADY SEEN SPECIES 

canonic form: E(r)

species: E(r)


ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)

compute one refinementdisjoint union E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)
add new reactionREACTANTS

ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)

species: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)

PRODUCT

ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)


ALREADY SEEN SPECIES 

canonic form: E(r)

species: E(r)


test for rule 5 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                       -- R/*2*//*0*/.r = R/*1*//*0*/.r
                       ++ R/*2*//*0*/.r = ⊥, R/*1*//*0*/.r = ⊥ @5
  regular case
  find embeddings
  new embeddings
  * rule:5 cc:1:R(r!1), R(r!1):
    E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)
    E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)
    
  compute one refinement
  disjoint union E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)
  add new reaction
  REACTANTS

  ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)

species: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)

PRODUCT

ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)


ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)

compute one refinementdisjoint union E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)
add new reactionREACTANTS

ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)

species: E(r!1), R(e!1, r!2), R(e!3, r!2), E(r!3)

PRODUCT

ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)


ALREADY SEEN SPECIES 

canonic form: E(r!1), R(e!1, r)

species: E(r!1), R(e!1, r)


test for rule 6 (Aut:1) -- 
                       ++ R/*ν 0*/, R/*ν 0*/.e = ⊥, R/*ν 0*/.r = ⊥ @6
  regular case
  new embeddings
  
test for rule 7 (Aut:1)0: /*cc6*/ A/*4*/(x), 1: /*cc7*/ B/*5*/(x)
                       -- B/*5*//*1*/.x = ⊥, A/*4*//*0*/.x = ⊥
                       ++ B/*5*//*1*/.x = A/*4*//*0*/.x @12
  regular case
  find embeddings
  find embeddings
  new embeddings
  * rule:7 cc:1:B(x):
    
  * rule:7 cc:2:A(x):
    
  
test for rule 8 (Aut:1)0: /*cc8*/ A/*4*/(x!1), B/*5*/(x!1)
                       -- B/*5*//*0*/.x = A/*4*//*0*/.x
                       ++ B/*5*//*0*/.x = ⊥, A/*4*//*0*/.x = ⊥ @13
  regular case
  find embeddings
  new embeddings
  * rule:8 cc:1:A(x!1), B(x!1):
    
  
test for the new species: A(x)
  test for rule 1 (Aut:1)0: /*cc3*/ E/*3*/(r), 1: /*cc4*/ R/*1*/(e)
                         -- R/*1*//*1*/.e = ⊥, E/*3*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.e = E/*3*//*0*/.r @1
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:1 cc:1:R(e):
      
    * rule:1 cc:2:E(r):
      
    
  test for rule 2 (Aut:1)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*0*/.e = E/*3*//*0*/.r
                         ++ R/*1*//*0*/.e = ⊥, E/*3*//*0*/.r = ⊥ @2
    regular case
    find embeddings
    new embeddings
    * rule:2 cc:1:R(e!1, r), E(r!1):
      
    
  test for rule 3 (Aut:2)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1),
                         1: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*1*/.r = ⊥, R/*1*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.r = R/*1*//*0*/.r @3
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:3 cc:1:R(e!1, r), E(r!1):
      
    * rule:3 cc:2:R(e!1, r), E(r!1):
      
    
  test for rule 4 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                         -- R/*2*//*0*/.r = R/*1*//*0*/.r,
                            R/*1*//*0*/.e = ???, R/*1*//*0*/
                         ++ R/*2*//*0*/.r = ⊥ @4
    regular case
    find embeddings
    new embeddings
    * rule:4 cc:1:R(r!1), R(r!1):
      
    
  test for rule 5 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                         -- R/*2*//*0*/.r = R/*1*//*0*/.r
                         ++ R/*2*//*0*/.r = ⊥, R/*1*//*0*/.r = ⊥ @5
    regular case
    find embeddings
    new embeddings
    * rule:5 cc:1:R(r!1), R(r!1):
      
    
  test for rule 6 (Aut:1) -- 
                         ++ R/*ν 0*/, R/*ν 0*/.e = ⊥, R/*ν 0*/.r = ⊥
                         @6
    regular case
    new embeddings
    
  test for rule 7 (Aut:1)0: /*cc6*/ A/*4*/(x), 1: /*cc7*/ B/*5*/(x)
                         -- B/*5*//*1*/.x = ⊥, A/*4*//*0*/.x = ⊥
                         ++ B/*5*//*1*/.x = A/*4*//*0*/.x @12
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:7 cc:1:B(x):
      
    * rule:7 cc:2:A(x):
      A(x)
      
    
  test for rule 8 (Aut:1)0: /*cc8*/ A/*4*/(x!1), B/*5*/(x!1)
                         -- B/*5*//*0*/.x = A/*4*//*0*/.x
                         ++ B/*5*//*0*/.x = ⊥, A/*4*//*0*/.x = ⊥ @13
    regular case
    find embeddings
    new embeddings
    * rule:8 cc:1:A(x!1), B(x!1):
      
    
  
test for the new species: B(x)
  test for rule 1 (Aut:1)0: /*cc3*/ E/*3*/(r), 1: /*cc4*/ R/*1*/(e)
                         -- R/*1*//*1*/.e = ⊥, E/*3*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.e = E/*3*//*0*/.r @1
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:1 cc:1:R(e):
      
    * rule:1 cc:2:E(r):
      
    
  test for rule 2 (Aut:1)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*0*/.e = E/*3*//*0*/.r
                         ++ R/*1*//*0*/.e = ⊥, E/*3*//*0*/.r = ⊥ @2
    regular case
    find embeddings
    new embeddings
    * rule:2 cc:1:R(e!1, r), E(r!1):
      
    
  test for rule 3 (Aut:2)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1),
                         1: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*1*/.r = ⊥, R/*1*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.r = R/*1*//*0*/.r @3
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:3 cc:1:R(e!1, r), E(r!1):
      
    * rule:3 cc:2:R(e!1, r), E(r!1):
      
    
  test for rule 4 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                         -- R/*2*//*0*/.r = R/*1*//*0*/.r,
                            R/*1*//*0*/.e = ???, R/*1*//*0*/
                         ++ R/*2*//*0*/.r = ⊥ @4
    regular case
    find embeddings
    new embeddings
    * rule:4 cc:1:R(r!1), R(r!1):
      
    
  test for rule 5 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                         -- R/*2*//*0*/.r = R/*1*//*0*/.r
                         ++ R/*2*//*0*/.r = ⊥, R/*1*//*0*/.r = ⊥ @5
    regular case
    find embeddings
    new embeddings
    * rule:5 cc:1:R(r!1), R(r!1):
      
    
  test for rule 6 (Aut:1) -- 
                         ++ R/*ν 0*/, R/*ν 0*/.e = ⊥, R/*ν 0*/.r = ⊥
                         @6
    regular case
    new embeddings
    
  test for rule 7 (Aut:1)0: /*cc6*/ A/*4*/(x), 1: /*cc7*/ B/*5*/(x)
                         -- B/*5*//*1*/.x = ⊥, A/*4*//*0*/.x = ⊥
                         ++ B/*5*//*1*/.x = A/*4*//*0*/.x @12
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:7 cc:1:B(x):
      B(x)
      
    * rule:7 cc:2:A(x):
      
    compute one refinement
    disjoint union B(x)
                   A(x)
    add new reaction
    REACTANTS

    ALREADY SEEN SPECIES 

canonic form: A(x)

species: A(x)


ALREADY SEEN SPECIES 

canonic form: B(x)

species: B(x)

PRODUCT

A NEW SPECIES IS DISCOVERED 

canonic form: A(x!1), B(x!1)

species: A(x!1), B(x!1)


test for rule 8 (Aut:1)0: /*cc8*/ A/*4*/(x!1), B/*5*/(x!1)
                       -- B/*5*//*0*/.x = A/*4*//*0*/.x
                       ++ B/*5*//*0*/.x = ⊥, A/*4*//*0*/.x = ⊥ @13
  regular case
  find embeddings
  new embeddings
  * rule:8 cc:1:A(x!1), B(x!1):
    
  
test for the new species: A(x!1), B(x!1)
  test for rule 1 (Aut:1)0: /*cc3*/ E/*3*/(r), 1: /*cc4*/ R/*1*/(e)
                         -- R/*1*//*1*/.e = ⊥, E/*3*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.e = E/*3*//*0*/.r @1
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:1 cc:1:R(e):
      
    * rule:1 cc:2:E(r):
      
    
  test for rule 2 (Aut:1)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*0*/.e = E/*3*//*0*/.r
                         ++ R/*1*//*0*/.e = ⊥, E/*3*//*0*/.r = ⊥ @2
    regular case
    find embeddings
    new embeddings
    * rule:2 cc:1:R(e!1, r), E(r!1):
      
    
  test for rule 3 (Aut:2)0: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1),
                         1: /*cc5*/ R/*1*/(e!1, r), E/*3*/(r!1)
                         -- R/*1*//*1*/.r = ⊥, R/*1*//*0*/.r = ⊥
                         ++ R/*1*//*1*/.r = R/*1*//*0*/.r @3
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:3 cc:1:R(e!1, r), E(r!1):
      
    * rule:3 cc:2:R(e!1, r), E(r!1):
      
    
  test for rule 4 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                         -- R/*2*//*0*/.r = R/*1*//*0*/.r,
                            R/*1*//*0*/.e = ???, R/*1*//*0*/
                         ++ R/*2*//*0*/.r = ⊥ @4
    regular case
    find embeddings
    new embeddings
    * rule:4 cc:1:R(r!1), R(r!1):
      
    
  test for rule 5 (Aut:2)0: /*cc1*/ R/*1*/(r!1), R/*2*/(r!1)
                         -- R/*2*//*0*/.r = R/*1*//*0*/.r
                         ++ R/*2*//*0*/.r = ⊥, R/*1*//*0*/.r = ⊥ @5
    regular case
    find embeddings
    new embeddings
    * rule:5 cc:1:R(r!1), R(r!1):
      
    
  test for rule 6 (Aut:1) -- 
                         ++ R/*ν 0*/, R/*ν 0*/.e = ⊥, R/*ν 0*/.r = ⊥
                         @6
    regular case
    new embeddings
    
  test for rule 7 (Aut:1)0: /*cc6*/ A/*4*/(x), 1: /*cc7*/ B/*5*/(x)
                         -- B/*5*//*1*/.x = ⊥, A/*4*//*0*/.x = ⊥
                         ++ B/*5*//*1*/.x = A/*4*//*0*/.x @12
    regular case
    find embeddings
    find embeddings
    new embeddings
    * rule:7 cc:1:B(x):
      
    * rule:7 cc:2:A(x):
      
    
  test for rule 8 (Aut:1)0: /*cc8*/ A/*4*/(x!1), B/*5*/(x!1)
                         -- B/*5*//*0*/.x = A/*4*//*0*/.x
                         ++ B/*5*//*0*/.x = ⊥, A/*4*//*0*/.x = ⊥ @13
    regular case
    find embeddings
    new embeddings
    * rule:8 cc:1:A(x!1), B(x!1):
      A(x!1), B(x!1)
      
    compute one refinement
    disjoint union A(x!1), B(x!1)
    add new reaction
    REACTANTS

    ALREADY SEEN SPECIES 

canonic form: A(x!1), B(x!1)

species: A(x!1), B(x!1)

PRODUCT

ALREADY SEEN SPECIES 

canonic form: B(x)

species: B(x)


ALREADY SEEN SPECIES 

canonic form: A(x)

species: A(x)



	 -tokens 
	 -variables 

ALREADY SEEN SPECIES 

canonic form: E(r)

species: E(r)


ALREADY SEEN SPECIES 

canonic form: R(e, r)

species: R(e, r)


ALREADY SEEN SPECIES 

canonic form: A(x)

species: A(x)


ALREADY SEEN SPECIES 

canonic form: B(x)

species: B(x)

	 -observables 
+ exporting the network... 
	 -main function 
	 -ode system 
	 -initial state 
	 -rates 
