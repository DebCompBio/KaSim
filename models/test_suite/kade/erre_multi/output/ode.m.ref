function main=main()
% command line: 
%      'KaDE' 'erre.ka' '-d' 'output' '-l' '1' '-p''0.01'
%% THINGS THAT ARE KNOWN FROM KAPPA FILE AND KaSim OPTIONS;
%% 
%% init - the initial abundances of each species and token
%% tinit - the initial simulation time (likely 0)
%% tend - the final simulation time 
%% initialstep - initial time step at the beginning of numerical integration
%% period_t_point - the time period between points to return
%%
%% variables (init(i),y(i)) denote numbers of embeddings 
%% rule rates are corrected by the number of automorphisms in the lhs of rules


tinit=0;
tend=1;
initialstep=1e-06;
period_t_point=0.01;

global nodevar
nodevar=8;
nvar=4;
nobs=3;
nrules=12;

global var
var=zeros(nvar,1);
global init
init=sparse(nodevar,1);
global k
global kd
global kun
global kdun

k=zeros(nrules,1);
kd=zeros(nrules,1);
kun=zeros(nrules,1);
kdun=zeros(nrules,1);
global jacvar
jacvar=sparse(nvar,nodevar);
global jack
global jackd
global jackun
global jackund

jack=zeros(nrules,nodevar);
jackd=zeros(nrules,nodevar);
jackun=zeros(nrules,nodevar);
jackund=zeros(nrules,nodevar);

t = 0.000000;

init(8)=t;
init(2)=10; % E(r, s)
init(1)=100; % R(e, r)
var(2)=init(1)+init(3)+init(4);
var(1)=(2*init(6)+2*init(7)+2*init(5))/2;

k(1)=1; % E(r,s), R(e) -> E(r!1,s), R(e!1)
k(2)=1; % E(r,s), R(e) -> E(r,s!1), R(e!1)
k(3)=2; % R(e!_,r) -> R(e,r)
k(4)=2; % R(e!_,r) -> R(e,r)
k(5)=3; % R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
k(6)=3; % R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
k(7)=3; % R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
k(8)=3; % R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
k(9)=3; % R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
k(10)=3; % R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
k(11)=4; % R(r!_) -> 
k(12)=5; % R(r!_) -> R(r)

uiIsOctave = false;
uiIsMatlab = false;
LIC = license('inuse');
for elem = 1:numel(LIC)
    envStr = LIC(elem).feature
    if strcmpi(envStr,'octave')
       LICname=envStr;
       uiIsOctave = true;
       break
    end
    if strcmpi(envStr,'matlab')
       LICname=envStr
       uiIsMatlab = true;
       break
    end
end


options = odeset('RelTol', 1e-3, ...
                 'AbsTol', 1e-3, ...
                 'InitialStep', initialstep, ...
                 'MaxStep', tend, ...
                 'Jacobian', @ode_jacobian);


if uiIsMatlab
   soln =  ode15s(@ode_aux,[tinit tend],ode_init(),options);
   soln.y=soln.y';
elseif uiIsOctave
   soln = ode2r(@ode_aux,[tinit tend],ode_init(),options);
end


nrows = length(soln.x);
tmp = zeros(nodevar,1);

n_points = floor ((tend-tinit)/period_t_point)+1;
t = linspace(tinit, tend, n_points);
obs = zeros(nrows,nobs);

for j=1:nrows
    for i=1:nodevar
        z(i)=soln.y(j,i);
    end
    h=ode_obs(z);
    for i=1:nobs
        obs(j,i)=h(i);
    end
end
if nobs==1
   y = interp1(soln.x, obs, t, 'pchip')';
else
   y = interp1(soln.x, obs, t, 'pchip');
end


filename = 'data.csv';
fid = fopen (filename,'w');
fprintf(fid,'# KaDE erre.ka -d output -l 1 -p 0.01\n')
fprintf(fid,'# ')
fprintf(fid,'[T],')
fprintf(fid,'dimmers,')
fprintf(fid,'monomers,')
fprintf(fid,'\n')
for j=1:n_points
    for i=1:nobs
        fprintf(fid,'%f,',y(j,i));
    end
    fprintf(fid,'\n');
end
fclose(fid);


end



function Init=ode_init()

global nodevar
global init
Init=zeros(nodevar,1);

Init(1) = init(1); % R(e, r)
Init(2) = init(2); % E(r, s)
Init(3) = init(3); % R(e!1, r), E(r!1, s)
Init(4) = init(4); % R(e!1, r), E(r, s!1)
Init(5) = init(5); % R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3)
Init(6) = init(6); % R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s)
Init(7) = init(7); % R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s)
Init(8) = init(8); % t
end


function dydt=ode_aux(t,y)

global nodevar
global var
global k
global kd
global kun
global kdun

var(2)=y(1)+y(3)+y(4);
var(1)=(2*y(6)+2*y(7)+2*y(5))/2;


dydt=zeros(nodevar,1);

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) -> R(e!1, r), E(r!1, s) + R(e!1, r), E(r!1, s) 

dydt(6)=dydt(6)-2*k(12)*y(6)/2;
dydt(3)=dydt(3)+k(12)*y(6)/2;
dydt(3)=dydt(3)+k(12)*y(6)/2;

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) -> R(e!1, r), E(r!1, s) + R(e!1, r), E(r!1, s) 

dydt(6)=dydt(6)-2*k(12)*y(6)/2;
dydt(3)=dydt(3)+k(12)*y(6)/2;
dydt(3)=dydt(3)+k(12)*y(6)/2;

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) -> R(e!1, r), E(r!1, s) + E(r, s) 

dydt(6)=dydt(6)-2*k(11)*y(6)/2;
dydt(2)=dydt(2)+k(11)*y(6)/2;
dydt(3)=dydt(3)+k(11)*y(6)/2;

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) -> R(e!1, r), E(r!1, s) + E(r, s) 

dydt(6)=dydt(6)-2*k(11)*y(6)/2;
dydt(2)=dydt(2)+k(11)*y(6)/2;
dydt(3)=dydt(3)+k(11)*y(6)/2;

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) -> R(e!1, r), E(r, s!1) + R(e!1, r), E(r!1, s) 

dydt(7)=dydt(7)-k(12)*y(7);
dydt(3)=dydt(3)+k(12)*y(7);
dydt(4)=dydt(4)+k(12)*y(7);

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) -> R(e!1, r), E(r, s!1) + R(e!1, r), E(r!1, s) 

dydt(7)=dydt(7)-k(12)*y(7);
dydt(3)=dydt(3)+k(12)*y(7);
dydt(4)=dydt(4)+k(12)*y(7);

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) -> R(e!1, r), E(r, s!1) + E(r, s) 

dydt(7)=dydt(7)-k(11)*y(7);
dydt(2)=dydt(2)+k(11)*y(7);
dydt(4)=dydt(4)+k(11)*y(7);

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) -> R(e!1, r), E(r!1, s) + E(r, s) 

dydt(7)=dydt(7)-k(11)*y(7);
dydt(2)=dydt(2)+k(11)*y(7);
dydt(3)=dydt(3)+k(11)*y(7);

% rule    : R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
% reaction: R(e!1, r), E(r!1, s) + R(e!1, r), E(r, s!1) -> R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) 

dydt(4)=dydt(4)-1/2*k(9)*y(4)*y(3);
dydt(3)=dydt(3)-1/2*k(9)*y(4)*y(3);
dydt(7)=dydt(7)+1/2*k(9)*y(4)*y(3);

% rule    : R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
% reaction: R(e!1, r), E(r, s!1) + R(e!1, r), E(r!1, s) -> R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) 

dydt(3)=dydt(3)-1/2*k(7)*y(3)*y(4);
dydt(4)=dydt(4)-1/2*k(7)*y(3)*y(4);
dydt(7)=dydt(7)+1/2*k(7)*y(3)*y(4);

% rule    : R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
% reaction: R(e!1, r), E(r!1, s) + R(e!1, r), E(r!1, s) -> R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) 

dydt(3)=dydt(3)-1/2*k(5)*y(3)*y(3);
dydt(3)=dydt(3)-1/2*k(5)*y(3)*y(3);
dydt(6)=dydt(6)+2/2*k(5)*y(3)*y(3);

% rule    : R(e!_,r) -> R(e,r)
% reaction: R(e!1, r), E(r!1, s) -> R(e, r) + E(r, s) 

dydt(3)=dydt(3)-k(3)*y(3);
dydt(2)=dydt(2)+k(3)*y(3);
dydt(1)=dydt(1)+k(3)*y(3);

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) -> R(e!1, r), E(r, s!1) + R(e!1, r), E(r, s!1) 

dydt(5)=dydt(5)-2*k(12)*y(5)/2;
dydt(4)=dydt(4)+k(12)*y(5)/2;
dydt(4)=dydt(4)+k(12)*y(5)/2;

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) -> R(e!1, r), E(r, s!1) + R(e!1, r), E(r, s!1) 

dydt(5)=dydt(5)-2*k(12)*y(5)/2;
dydt(4)=dydt(4)+k(12)*y(5)/2;
dydt(4)=dydt(4)+k(12)*y(5)/2;

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) -> R(e!1, r), E(r, s!1) + E(r, s) 

dydt(5)=dydt(5)-2*k(11)*y(5)/2;
dydt(2)=dydt(2)+k(11)*y(5)/2;
dydt(4)=dydt(4)+k(11)*y(5)/2;

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) -> R(e!1, r), E(r, s!1) + E(r, s) 

dydt(5)=dydt(5)-2*k(11)*y(5)/2;
dydt(2)=dydt(2)+k(11)*y(5)/2;
dydt(4)=dydt(4)+k(11)*y(5)/2;

% rule    : R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
% reaction: R(e!1, r), E(r, s!1) + R(e!1, r), E(r, s!1) -> R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) 

dydt(4)=dydt(4)-1/2*k(10)*y(4)*y(4);
dydt(4)=dydt(4)-1/2*k(10)*y(4)*y(4);
dydt(5)=dydt(5)+2/2*k(10)*y(4)*y(4);

% rule    : R(e!_,r) -> R(e,r)
% reaction: R(e!1, r), E(r, s!1) -> R(e, r) + E(r, s) 

dydt(4)=dydt(4)-k(4)*y(4);
dydt(2)=dydt(2)+k(4)*y(4);
dydt(1)=dydt(1)+k(4)*y(4);

% rule    : E(r,s), R(e) -> E(r,s!1), R(e!1)
% reaction: R(e, r) + E(r, s) -> R(e!1, r), E(r, s!1) 

dydt(2)=dydt(2)-k(2)*y(2)*y(1);
dydt(1)=dydt(1)-k(2)*y(2)*y(1);
dydt(4)=dydt(4)+k(2)*y(2)*y(1);

% rule    : E(r,s), R(e) -> E(r!1,s), R(e!1)
% reaction: R(e, r) + E(r, s) -> R(e!1, r), E(r!1, s) 

dydt(2)=dydt(2)-k(1)*y(2)*y(1);
dydt(1)=dydt(1)-k(1)*y(2)*y(1);
dydt(3)=dydt(3)+k(1)*y(2)*y(1);
dydt(8)=1;

end


function jac=ode_jacobian(t,y)

global nodevar
global jacvar
global var
global k
global kd
global kun
global kdun

global jack
global jackd
global jackun
global jackund

var(2)=y(1)+y(3)+y(4);
var(1)=(2*y(6)+2*y(7)+2*y(5))/2;

jacvar(2,1)=1;
jacvar(2,3)=1;
jacvar(2,4)=1;
jacvar(1,5)=4/(2**2);
jacvar(1,6)=4/(2**2);
jacvar(1,7)=4/(2**2);


jac=sparse(nodevar,nodevar);

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) -> R(e!1, r), E(r!1, s) + R(e!1, r), E(r!1, s) 

jac(6,6)=jac(6,6)-2*k(12)/2;
jac(3,6)=jac(3,6)+k(12)/2;
jac(3,6)=jac(3,6)+k(12)/2;

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) -> R(e!1, r), E(r!1, s) + R(e!1, r), E(r!1, s) 

jac(6,6)=jac(6,6)-2*k(12)/2;
jac(3,6)=jac(3,6)+k(12)/2;
jac(3,6)=jac(3,6)+k(12)/2;

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) -> R(e!1, r), E(r!1, s) + E(r, s) 

jac(6,6)=jac(6,6)-2*k(11)/2;
jac(2,6)=jac(2,6)+k(11)/2;
jac(3,6)=jac(3,6)+k(11)/2;

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) -> R(e!1, r), E(r!1, s) + E(r, s) 

jac(6,6)=jac(6,6)-2*k(11)/2;
jac(2,6)=jac(2,6)+k(11)/2;
jac(3,6)=jac(3,6)+k(11)/2;

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) -> R(e!1, r), E(r, s!1) + R(e!1, r), E(r!1, s) 

jac(7,7)=jac(7,7)-k(12);
jac(3,7)=jac(3,7)+k(12);
jac(4,7)=jac(4,7)+k(12);

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) -> R(e!1, r), E(r, s!1) + R(e!1, r), E(r!1, s) 

jac(7,7)=jac(7,7)-k(12);
jac(3,7)=jac(3,7)+k(12);
jac(4,7)=jac(4,7)+k(12);

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) -> R(e!1, r), E(r, s!1) + E(r, s) 

jac(7,7)=jac(7,7)-k(11);
jac(2,7)=jac(2,7)+k(11);
jac(4,7)=jac(4,7)+k(11);

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) -> R(e!1, r), E(r!1, s) + E(r, s) 

jac(7,7)=jac(7,7)-k(11);
jac(2,7)=jac(2,7)+k(11);
jac(3,7)=jac(3,7)+k(11);

% rule    : R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
% reaction: R(e!1, r), E(r!1, s) + R(e!1, r), E(r, s!1) -> R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) 

jac(4,4)=jac(4,4)-1/2*k(9)*y(3);
jac(4,3)=jac(4,3)-1/2*k(9)*y(4);
jac(3,4)=jac(3,4)-1/2*k(9)*y(3);
jac(3,3)=jac(3,3)-1/2*k(9)*y(4);
jac(7,4)=jac(7,4)+1/2*k(9)*y(3);
jac(7,3)=jac(7,3)+1/2*k(9)*y(4);

% rule    : R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
% reaction: R(e!1, r), E(r, s!1) + R(e!1, r), E(r!1, s) -> R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r!3, s) 

jac(3,3)=jac(3,3)-1/2*k(7)*y(4);
jac(3,4)=jac(3,4)-1/2*k(7)*y(3);
jac(4,3)=jac(4,3)-1/2*k(7)*y(4);
jac(4,4)=jac(4,4)-1/2*k(7)*y(3);
jac(7,3)=jac(7,3)+1/2*k(7)*y(4);
jac(7,4)=jac(7,4)+1/2*k(7)*y(3);

% rule    : R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
% reaction: R(e!1, r), E(r!1, s) + R(e!1, r), E(r!1, s) -> R(e!1, r!2), R(e!3, r!2), E(r!1, s), E(r!3, s) 

jac(3,3)=jac(3,3)-1/2*k(5)*y(3);
jac(3,3)=jac(3,3)-1/2*k(5)*y(3);
jac(3,3)=jac(3,3)-1/2*k(5)*y(3);
jac(3,3)=jac(3,3)-1/2*k(5)*y(3);
jac(6,3)=jac(6,3)+2/2*k(5)*y(3);
jac(6,3)=jac(6,3)+2/2*k(5)*y(3);

% rule    : R(e!_,r) -> R(e,r)
% reaction: R(e!1, r), E(r!1, s) -> R(e, r) + E(r, s) 

jac(3,3)=jac(3,3)-k(3);
jac(2,3)=jac(2,3)+k(3);
jac(1,3)=jac(1,3)+k(3);

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) -> R(e!1, r), E(r, s!1) + R(e!1, r), E(r, s!1) 

jac(5,5)=jac(5,5)-2*k(12)/2;
jac(4,5)=jac(4,5)+k(12)/2;
jac(4,5)=jac(4,5)+k(12)/2;

% rule    : R(r!_) -> R(r)
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) -> R(e!1, r), E(r, s!1) + R(e!1, r), E(r, s!1) 

jac(5,5)=jac(5,5)-2*k(12)/2;
jac(4,5)=jac(4,5)+k(12)/2;
jac(4,5)=jac(4,5)+k(12)/2;

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) -> R(e!1, r), E(r, s!1) + E(r, s) 

jac(5,5)=jac(5,5)-2*k(11)/2;
jac(2,5)=jac(2,5)+k(11)/2;
jac(4,5)=jac(4,5)+k(11)/2;

% rule    : R(r!_) -> 
% reaction: R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) -> R(e!1, r), E(r, s!1) + E(r, s) 

jac(5,5)=jac(5,5)-2*k(11)/2;
jac(2,5)=jac(2,5)+k(11)/2;
jac(4,5)=jac(4,5)+k(11)/2;

% rule    : R(e!_,r), R(e!_,r) -> R(e!_,r!1), R(e!_,r!1)
% reaction: R(e!1, r), E(r, s!1) + R(e!1, r), E(r, s!1) -> R(e!1, r!2), R(e!3, r!2), E(r, s!1), E(r, s!3) 

jac(4,4)=jac(4,4)-1/2*k(10)*y(4);
jac(4,4)=jac(4,4)-1/2*k(10)*y(4);
jac(4,4)=jac(4,4)-1/2*k(10)*y(4);
jac(4,4)=jac(4,4)-1/2*k(10)*y(4);
jac(5,4)=jac(5,4)+2/2*k(10)*y(4);
jac(5,4)=jac(5,4)+2/2*k(10)*y(4);

% rule    : R(e!_,r) -> R(e,r)
% reaction: R(e!1, r), E(r, s!1) -> R(e, r) + E(r, s) 

jac(4,4)=jac(4,4)-k(4);
jac(2,4)=jac(2,4)+k(4);
jac(1,4)=jac(1,4)+k(4);

% rule    : E(r,s), R(e) -> E(r,s!1), R(e!1)
% reaction: R(e, r) + E(r, s) -> R(e!1, r), E(r, s!1) 

jac(2,2)=jac(2,2)-k(2)*y(1);
jac(2,1)=jac(2,1)-k(2)*y(2);
jac(1,2)=jac(1,2)-k(2)*y(1);
jac(1,1)=jac(1,1)-k(2)*y(2);
jac(4,2)=jac(4,2)+k(2)*y(1);
jac(4,1)=jac(4,1)+k(2)*y(2);

% rule    : E(r,s), R(e) -> E(r!1,s), R(e!1)
% reaction: R(e, r) + E(r, s) -> R(e!1, r), E(r!1, s) 

jac(2,2)=jac(2,2)-k(1)*y(1);
jac(2,1)=jac(2,1)-k(1)*y(2);
jac(1,2)=jac(1,2)-k(1)*y(1);
jac(1,1)=jac(1,1)-k(1)*y(2);
jac(3,2)=jac(3,2)+k(1)*y(1);
jac(3,1)=jac(3,1)+k(1)*y(2);
end


function obs=ode_obs(y)

global nobs
global var
obs=zeros(nobs,1);

t = y(8);
var(2)=y(1)+y(3)+y(4);
var(1)=(2*y(6)+2*y(7)+2*y(5))/2;

obs(1)=t;
obs(2)=var(1);
obs(3)=var(2);

end


main();
