<!---->
<!doctype html>

<html>
<head>
  <meta charset="utf-8">
  <title>output/Agent_trace_A.x_.y_.z_.w_.t_</title>
  <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
  <script src="http://cpettitt.github.io/project/dagre-d3/latest/dagre-d3.min.js" charset="utf-8"></script>
  <style>
    dt {float: left; clear: left; width: 20em;}
    dd {font-weight: bold; margin: 0 0 0 21em;}
    .node rect {stroke: #333; fill: #fff;}
    .edgePath path {stroke: #333; fill: #333; stroke-width: 1.5px;}
  </style>
</head>
<body>
  <div class="container">
  <h1>output/Agent_trace_A.x_.y_.z_.w_.t_</h1>
  <svg width=960 height=600><g/></svg>
  <script>
  // Create a new directed graph
  var g = new dagreD3.graphlib.Graph().setGraph({});
  g.setNode(1, { label: "", style: "visibility:hidden", width: "0", height: "0" });
  g.setNode(2, { label: "A(x~p,w~u,t~u)" });
  g.setNode(3, { label: "A(x~p,z~u,t~u)" });
  g.setNode(4, { label: "A(y~p)" });
  g.setNode(5, { label: "A(z~u,w~u,t~u)" });
  g.setNode(6, { label: "A(y~p,z~u,t~u)" });
  g.setNode(7, { label: "A(w~u)" });
  g.setNode(8, { label: "A(x~p,y~p,t~u)" });
  g.setNode(9, { label: "A(z~u)" });
  g.setNode(10, { label: "A(x~p)" });
  g.setNode(11, { label: "A(y~p,w~u,t~u)" });
  g.setNode(12, { label: "A(x~p,y~p,z~p,w~p,t~p)" });
  g.setNode(13, { label: "A(x~p,y~p,z~p,w~p,t~u)" });
  g.setNode(14, { label: "A(x~p,y~p,w~p,t~u)" });
  g.setNode(15, { label: "A(x~p,y~p,w~u,t~u)" });
  g.setNode(16, { label: "A(x~p,y~p,z~p,t~u)" });
  g.setNode(17, { label: "A(x~p,y~p,z~u,t~u)" });
  g.setNode(18, { label: "A(y~p,z~u,w~u,t~u)" });
  g.setNode(19, { label: "A(y~u,z~u,w~u,t~u)" });
  g.setNode(20, { label: "A(x~p,z~u,w~u,t~u)" });
  g.setNode(21, { label: "A(x~u,z~u,w~u,t~u)" });
  g.setNode(22, { label: "A(x~u,y~u,z~u,w~u,t~u)" });
  g.setEdge(12,13,{ label: "rule 9: t-" });
  g.setEdge(14,15,{ label: "rule 8: w-" });
  g.setEdge(16,17,{ label: "rule 7: z-" });
  g.setEdge(18,19,{ label: "rule 6: y-" });
  g.setEdge(20,21,{ label: "rule 5: x-" });
  g.setEdge(13,12,{ label: "rule 4: t+" });
  g.setEdge(15,14,{ label: "rule 3: w+" });
  g.setEdge(17,16,{ label: "rule 2: z+" });
  g.setEdge(19,18,{ label: "rule 1: y+" });
  g.setEdge(21,20,{ label: "rule 0: x+" });
  g.setEdge(1,22,{ label: "" });
  g.setNode(23, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(23,11,{  });
  g.setEdge(23,4,{  });
  g.setEdge(23,7,{  });
  g.setNode(24, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(24,5,{  });
  g.setEdge(24,9,{  });
  g.setEdge(24,7,{  });
  g.setNode(25, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(25,19,{  });
  g.setEdge(25,5,{  });
  g.setNode(26, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(26,22,{  });
  g.setEdge(26,19,{  });
  g.setEdge(26,21,{  });
  g.setNode(27, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(27,21,{  });
  g.setEdge(27,5,{  });
  g.setNode(28, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(28,20,{  });
  g.setEdge(28,5,{  });
  g.setEdge(28,3,{  });
  g.setEdge(28,2,{  });
  g.setNode(29, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(29,18,{  });
  g.setEdge(29,11,{  });
  g.setEdge(29,5,{  });
  g.setEdge(29,6,{  });
  g.setNode(30, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(30,6,{  });
  g.setEdge(30,4,{  });
  g.setEdge(30,9,{  });
  g.setNode(31, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(31,17,{  });
  g.setEdge(31,6,{  });
  g.setEdge(31,8,{  });
  g.setEdge(31,3,{  });
  g.setNode(32, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(32,16,{  });
  g.setEdge(32,8,{  });
  g.setNode(33, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(33,15,{  });
  g.setEdge(33,11,{  });
  g.setEdge(33,8,{  });
  g.setEdge(33,2,{  });
  g.setNode(34, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(34,14,{  });
  g.setEdge(34,8,{  });
  g.setNode(35, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(35,13,{  });
  g.setEdge(35,16,{  });
  g.setEdge(35,14,{  });
  g.setNode(36, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(36,12,{  });
  g.setEdge(36,4,{  });
  g.setEdge(36,10,{  });
  g.setNode(37, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(37,8,{  });
  g.setEdge(37,4,{  });
  g.setEdge(37,10,{  });
  g.setNode(38, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(38,3,{  });
  g.setEdge(38,9,{  });
  g.setEdge(38,10,{  });
  g.setNode(39, { label: "", shape: "ellipse", width: "0", height: "0", style: "fill: #000"  });
  g.setEdge(39,2,{  });
  g.setEdge(39,7,{  });
  g.setEdge(39,10,{  });
  var svg = d3.select("svg"),inner = svg.select("g");
  // Set up zoom support
  var zoom = d3.behavior.zoom().on("zoom", function() {
  inner.attr("transform", "translate(" + d3.event.translate + ")" +
  "scale(" + d3.event.scale + ")");
  });
  svg.call(zoom);// Create the renderer
   var render = new dagreD3.render();
  // Run the renderer. This is what draws the final graph.
  render(inner, g);
  // Center the graph
  var initialScale = 0.75;
  zoom
  .translate([(svg.attr("width") - g.graph().width * initialScale) / 2, 20])
  .scale(initialScale)
  .event(svg);
  svg.attr('height', g.graph().height * initialScale + 40);
  </script>
  </div>
</body>
</html>
