let file = ref ""
let dotCflows = ref true
let none_compression = ref false
let weak_compression = ref false
let strong_compression = ref false

let options = [
    ("--version",
     Arg.Unit (fun () -> Format.print_string Version.version_msg;
			 Format.print_newline () ; exit 0),
     "display KaStor version");
    ("-o", Arg.String Kappa_files.set_ccFile,
     "file name skeleton for outputs") ;
    ("-d",
     Arg.String Kappa_files.set_dir,
     "Specifies directory name where output file(s) should be stored");
    ("--none", Arg.Set none_compression, "Outputs uncompressed stories");
    ("--weak", Arg.Set weak_compression, "Outputs weakly compressed stories");
    ("--strong",
     Arg.Set strong_compression,
     "Outputs strongly compressed stories");
    ("--html", Arg.Clear dotCflows, "Print stories in html format");
    ("--time-independent",
     Arg.Set Parameter.time_independent,
     "Disable the use of time is story heuritics (for test suite)")
  ]

let main () =
  let () =
    Arg.parse
      options
      (fun f -> if !file = "" then file := f else
		  let () = Format.eprintf "Deals only with 1 file" in exit 2)
      (Sys.argv.(0) ^
	 " trace\n computes stories from 'trace' file generated by KaSim") in
  let desc = if !file = "" then stdin else open_in_bin (!file) in
  let (compressions,env,steps):
	(bool*bool*bool) * Environment.t * Trace.t =
    Marshal.from_channel desc in
  let () = close_in desc in
  let (none,weak,strong) =
    if !none_compression || !weak_compression || !strong_compression
    then (!none_compression, !weak_compression, !strong_compression)
    else compressions in
  Compression_main.compress_and_print
    ~called_from:Remanent_parameters_sig.KaSim ~dotFormat:(!dotCflows)
    ~none ~weak ~strong env (Compression_main.init_secret_log_info ()) steps

let () = main ()
